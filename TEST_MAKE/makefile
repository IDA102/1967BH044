# Имя цели(компилируемого объекта)
TARGETS = adcraw

# Подключение прочих объектов библиотеки HAL
-include other_boj.mk

# Поиск объектов в папках ... 
VPATH = ./src/src : ./inc/inc : ./src : ./inc : ./other_doj

################################################
##_______________КОМПИЛЯТОР___________________##
################################################
SRC = -I "C:/Milandr/CM-LYNX.2.02.00/toolchain/Inc"
SRC_2 = -I "./src/src"
#Генерирование полной отладочной информации.
G = -g
#Степень оптимизации.
O = -O0
#Установка режима вывода объектного файла (после обработки ассемблером). 
C = -c
#Установка режима вывода ассемблерного файла.
S = -S
#Установка размера double в 64 бита. 
DS = --double-size-64
#Установка размера char в 32 бита. 
CS_32 = --char-size-32
CS_8  = --char-size-8
#Установка целевой платформы LYNX. 
LYNX = --target=lynx
#Стандарт языка.
STANDART = -std=gnu11
#Форматирование сообщений об ошибках, каждое сообщение об ошибке появляется в одной строке. 
MESSAGE = -fmessage-length=0
# include заголовочные файлы *.h
i_include  = -I "./inc/inc"
i_include2 = -I "./inc"
#Определить макрос. 
MACROS_CLANG = -D __1967VN044__
#Включение режима размещения каждой глобальной переменной в отдельной секции. Объектные файлы будут содержать отдельные секции для каждой глобальной переменной.
FDATA_SEC = -fdata-sections
#Включение режима размещения каждой функции в отдельной секции. Объектные файлы будут содержать отдельные секции для каждой функции.
FFUNC_SEC = -ffunction-sections
# ХЗ
WP = -Wunknown-pragmas

################################################
##________________АССЕМБЛЕР___________________##
################################################
#Генерирование полной отладочной информации.
G = -g
#Генерирует именованный файл листинга.
L = -l
#Указывает целевой процессор, для которого ассемблер должен подготовить соответствующий код.
PROC = -proc 1967VN044
#Создать зависимости и продолжить работу. 
M = -MM
#Опция -Mo filename имеет приоритет над опцией -o filename.
M0= -Mo
#Искать включаемые файлы по указанному пути. 
i = -i ..
#Указать путь для поиска системных включаемых файлов.
ii = -i-
#Искать включаемые системные файлы по указанному пути.
INCLUDE = -i "C:\Milandr\CM-LYNX.2.02.00\toolchain\Inc"
INCLUDE_2 = -i "./inc/inc"
INCLUDE_3 = -i "./src/src"
#Определить макрос. 
MACROS = -D __1967VN044__=1
MACROS2 = -D __llvm__
#Задает имя целевого выходного объектного файла. 
O_NAME = -o  "$(TARGETS).doj" 

################################################
##________________КОМПОНОВЩИК_________________##
################################################
#Генерировать карту памяти всех символов в <file>. 
MAP = -Map "$(TARGETS).map"
#Создать файл перекрестных ссылок (xref) в выходном каталоге компоновщика. 
XREF = -xref "$(TARGETS).xref"
#Ввести имя компонуемого библиотечного файла. 
LIB = clib.dlb libcxx.dlb libcxxabi.dlb libunwind.dlb
#Найти библиотечные файлы по указанному пути. 
LIB_LDF_PATH = -L "C:\Milandr\CM-LYNX.2.02.00\toolchain\LibLLVM"
#Объявить и присвоить значение def макросу препроцессора с именем macro. 
MD = -MD __1967VN044__
#Создать зависимости и продолжить работу.Генерировать зависимости в файл. 
MMM0 = -MM -Mo link.deps
#Поместить выходные файлы в текущую папку. 
OD = -od .
#Ввести имя LDF-файла. 
NAME_LDF = -T project.ldf
#Искать включаемые файлы по указанному пути. 
i_ldf = -i "C:\Milandr\CM-LYNX.2.02.00\toolchain\LDF"
#Если опция задана, компоновщик для каждой входной секции проверяет реальную используемость символов этой секции. Если ни один из них не используется, данная входная секция исключается из процедуры формирования выходных секций и, соответственно, всего целевого образа .dxe. 
GC = --gc-sections
#Указать имя выходного исполняемого файла. 
NAME_DXE = -o  "$(TARGETS).dxe"

all: $(TARGETS).c $(TARGETS).doj $(TARGETS).dxe

$(TARGETS).s: $(TARGETS).c 
	clang.exe $(STANDART) $(LYNX) $(DS) $(CS_8) $(S) $(MACROS_CLANG) $(SRC) $(SRC_2) $(i_include) $(i_include2) $(O) $(FDATA_SEC) $(FFUNC_SEC) $(WP) $(G) $(C) $(MESSAGE) ./src/$(TARGETS).c
$(TARGETS).doj: $(TARGETS).s 
	mca-tsh.exe $(G) $(L) . $(PROC) $(M) $(M0) asm.deps $(i) $(ii) $(INCLUDE) $(INCLUDE_2) $(INCLUDE_3) $(MACROS) $(MACROS2) $(O_NAME) $(TARGETS).s
$(TARGETS).dxe: $(TARGETS).doj
	mclink-tsh.exe $(MAP) $(XREF) $(DS) $(CS_8) $(LIB) $(LIB_LDF_PATH) $(MD) $(MMM0) $(OD) $(NAME_LDF) $(INCLUDE) $(GC) $(NAME_DXE) $(OTHER_DOJ) $(TARGETS).doj

.PHONY	:	clean
clean	:
	rm -f *.is *.dmp *.xml *.dep *.deps *.map *.lst *.src *.i